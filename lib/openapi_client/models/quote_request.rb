=begin
#BVNK API Endpoints

#The BVNK API is designed to facilitate seamless and secure transactions including payments, channels, anddigital wallet transactions.

The version of the OpenAPI document: 1.0.1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.6.0

=end

require 'date'
require 'time'

module OpenapiClient
  class QuoteRequest
    attr_accessor :from

    attr_accessor :to

    attr_accessor :from_wallet

    attr_accessor :use_minimum

    attr_accessor :use_maximum

    attr_accessor :to_wallet

    attr_accessor :amount_in

    attr_accessor :pay_in_method

    attr_accessor :pay_out_method

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'from' => :'from',
        :'to' => :'to',
        :'from_wallet' => :'fromWallet',
        :'use_minimum' => :'useMinimum',
        :'use_maximum' => :'useMaximum',
        :'to_wallet' => :'toWallet',
        :'amount_in' => :'amountIn',
        :'pay_in_method' => :'payInMethod',
        :'pay_out_method' => :'payOutMethod'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'from' => :'String',
        :'to' => :'String',
        :'from_wallet' => :'Float',
        :'use_minimum' => :'Boolean',
        :'use_maximum' => :'Boolean',
        :'to_wallet' => :'Float',
        :'amount_in' => :'Float',
        :'pay_in_method' => :'String',
        :'pay_out_method' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::QuoteRequest` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::QuoteRequest`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'from')
        self.from = attributes[:'from']
      else
        self.from = 'EUR'
      end

      if attributes.key?(:'to')
        self.to = attributes[:'to']
      else
        self.to = 'USDC'
      end

      if attributes.key?(:'from_wallet')
        self.from_wallet = attributes[:'from_wallet']
      else
        self.from_wallet = 3598236
      end

      if attributes.key?(:'use_minimum')
        self.use_minimum = attributes[:'use_minimum']
      else
        self.use_minimum = false
      end

      if attributes.key?(:'use_maximum')
        self.use_maximum = attributes[:'use_maximum']
      else
        self.use_maximum = false
      end

      if attributes.key?(:'to_wallet')
        self.to_wallet = attributes[:'to_wallet']
      else
        self.to_wallet = 3598514
      end

      if attributes.key?(:'amount_in')
        self.amount_in = attributes[:'amount_in']
      else
        self.amount_in = 10
      end

      if attributes.key?(:'pay_in_method')
        self.pay_in_method = attributes[:'pay_in_method']
      else
        self.pay_in_method = 'wallet'
      end

      if attributes.key?(:'pay_out_method')
        self.pay_out_method = attributes[:'pay_out_method']
      else
        self.pay_out_method = 'wallet'
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @from.nil?
        invalid_properties.push('invalid value for "from", from cannot be nil.')
      end

      if @to.nil?
        invalid_properties.push('invalid value for "to", to cannot be nil.')
      end

      if @from_wallet.nil?
        invalid_properties.push('invalid value for "from_wallet", from_wallet cannot be nil.')
      end

      if @use_minimum.nil?
        invalid_properties.push('invalid value for "use_minimum", use_minimum cannot be nil.')
      end

      if @use_maximum.nil?
        invalid_properties.push('invalid value for "use_maximum", use_maximum cannot be nil.')
      end

      if @to_wallet.nil?
        invalid_properties.push('invalid value for "to_wallet", to_wallet cannot be nil.')
      end

      if @amount_in.nil?
        invalid_properties.push('invalid value for "amount_in", amount_in cannot be nil.')
      end

      if @pay_in_method.nil?
        invalid_properties.push('invalid value for "pay_in_method", pay_in_method cannot be nil.')
      end

      if @pay_out_method.nil?
        invalid_properties.push('invalid value for "pay_out_method", pay_out_method cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @from.nil?
      return false if @to.nil?
      return false if @from_wallet.nil?
      return false if @use_minimum.nil?
      return false if @use_maximum.nil?
      return false if @to_wallet.nil?
      return false if @amount_in.nil?
      return false if @pay_in_method.nil?
      return false if @pay_out_method.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          from == o.from &&
          to == o.to &&
          from_wallet == o.from_wallet &&
          use_minimum == o.use_minimum &&
          use_maximum == o.use_maximum &&
          to_wallet == o.to_wallet &&
          amount_in == o.amount_in &&
          pay_in_method == o.pay_in_method &&
          pay_out_method == o.pay_out_method
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [from, to, from_wallet, use_minimum, use_maximum, to_wallet, amount_in, pay_in_method, pay_out_method].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
