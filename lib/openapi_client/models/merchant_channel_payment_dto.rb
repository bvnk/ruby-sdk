=begin
#BVNK API Endpoints

#The BVNK API is designed to facilitate seamless and secure transactions including payments, channels, and digital wallet transactions.

The version of the OpenAPI document: 1.0.1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.6.0

=end

require 'date'
require 'time'

module OpenapiClient
  class MerchantChannelPaymentDto
    # The ID of the channel.
    attr_accessor :channel_id

    # The merchant ID linked to channel.
    attr_accessor :merchant_id

    # The display name fo the merchant.
    attr_accessor :merchant_display_name

    # The unique reference of the channel.
    attr_accessor :reference

    # The date and time, encoded into UNIX epoch timestamps.
    attr_accessor :date_created

    # The date and time, encoded into UNIX epoch timestamps.
    attr_accessor :last_updated

    # The status of the channel payment.
    attr_accessor :status

    # The uuid fo the channel payment.
    attr_accessor :uuid

    # The transaction hash of the channel payment.
    attr_accessor :hash

    # The address of the channel.
    attr_accessor :address

    # The tag of the channel.
    attr_accessor :tag

    # The currency of the payment.
    attr_accessor :paid_currency

    # The display currency of the channel.
    attr_accessor :display_currency

    # The currency of the wallet linked to the channel.
    attr_accessor :wallet_currency

    # The currency of the fee taken.
    attr_accessor :fee_currency

    # The amount paid to the channel.
    attr_accessor :paid_amount

    # The amount displayed of the channel payment.
    attr_accessor :display_amount

    # The amount converted to the wallet linked to the channel.
    attr_accessor :wallet_amount

    # The amount of the fee taken.
    attr_accessor :fee_amount

    attr_accessor :exchange_rate

    attr_accessor :display_rate

    attr_accessor :risk

    # The address source of the payment.
    attr_accessor :sources

    attr_accessor :network_fee

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'channel_id' => :'channelId',
        :'merchant_id' => :'merchantId',
        :'merchant_display_name' => :'merchantDisplayName',
        :'reference' => :'reference',
        :'date_created' => :'dateCreated',
        :'last_updated' => :'lastUpdated',
        :'status' => :'status',
        :'uuid' => :'uuid',
        :'hash' => :'hash',
        :'address' => :'address',
        :'tag' => :'tag',
        :'paid_currency' => :'paidCurrency',
        :'display_currency' => :'displayCurrency',
        :'wallet_currency' => :'walletCurrency',
        :'fee_currency' => :'feeCurrency',
        :'paid_amount' => :'paidAmount',
        :'display_amount' => :'displayAmount',
        :'wallet_amount' => :'walletAmount',
        :'fee_amount' => :'feeAmount',
        :'exchange_rate' => :'exchangeRate',
        :'display_rate' => :'displayRate',
        :'risk' => :'risk',
        :'sources' => :'sources',
        :'network_fee' => :'networkFee'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'channel_id' => :'String',
        :'merchant_id' => :'String',
        :'merchant_display_name' => :'String',
        :'reference' => :'String',
        :'date_created' => :'Integer',
        :'last_updated' => :'Integer',
        :'status' => :'String',
        :'uuid' => :'String',
        :'hash' => :'String',
        :'address' => :'String',
        :'tag' => :'String',
        :'paid_currency' => :'String',
        :'display_currency' => :'String',
        :'wallet_currency' => :'String',
        :'fee_currency' => :'String',
        :'paid_amount' => :'Float',
        :'display_amount' => :'Float',
        :'wallet_amount' => :'Float',
        :'fee_amount' => :'Float',
        :'exchange_rate' => :'ExchangeRateDto',
        :'display_rate' => :'ExchangeRateDto',
        :'risk' => :'ExchangeRateDto',
        :'sources' => :'Array<String>',
        :'network_fee' => :'NetworkFeeDto'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::MerchantChannelPaymentDto` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::MerchantChannelPaymentDto`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'channel_id')
        self.channel_id = attributes[:'channel_id']
      end

      if attributes.key?(:'merchant_id')
        self.merchant_id = attributes[:'merchant_id']
      end

      if attributes.key?(:'merchant_display_name')
        self.merchant_display_name = attributes[:'merchant_display_name']
      end

      if attributes.key?(:'reference')
        self.reference = attributes[:'reference']
      end

      if attributes.key?(:'date_created')
        self.date_created = attributes[:'date_created']
      else
        self.date_created = 0
      end

      if attributes.key?(:'last_updated')
        self.last_updated = attributes[:'last_updated']
      else
        self.last_updated = 0
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'uuid')
        self.uuid = attributes[:'uuid']
      end

      if attributes.key?(:'hash')
        self.hash = attributes[:'hash']
      end

      if attributes.key?(:'address')
        self.address = attributes[:'address']
      end

      if attributes.key?(:'tag')
        self.tag = attributes[:'tag']
      end

      if attributes.key?(:'paid_currency')
        self.paid_currency = attributes[:'paid_currency']
      end

      if attributes.key?(:'display_currency')
        self.display_currency = attributes[:'display_currency']
      end

      if attributes.key?(:'wallet_currency')
        self.wallet_currency = attributes[:'wallet_currency']
      end

      if attributes.key?(:'fee_currency')
        self.fee_currency = attributes[:'fee_currency']
      end

      if attributes.key?(:'paid_amount')
        self.paid_amount = attributes[:'paid_amount']
      else
        self.paid_amount = 0
      end

      if attributes.key?(:'display_amount')
        self.display_amount = attributes[:'display_amount']
      else
        self.display_amount = 0
      end

      if attributes.key?(:'wallet_amount')
        self.wallet_amount = attributes[:'wallet_amount']
      else
        self.wallet_amount = 0
      end

      if attributes.key?(:'fee_amount')
        self.fee_amount = attributes[:'fee_amount']
      else
        self.fee_amount = 0
      end

      if attributes.key?(:'exchange_rate')
        self.exchange_rate = attributes[:'exchange_rate']
      end

      if attributes.key?(:'display_rate')
        self.display_rate = attributes[:'display_rate']
      end

      if attributes.key?(:'risk')
        self.risk = attributes[:'risk']
      end

      if attributes.key?(:'sources')
        if (value = attributes[:'sources']).is_a?(Array)
          self.sources = value
        end
      end

      if attributes.key?(:'network_fee')
        self.network_fee = attributes[:'network_fee']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      status_validator = EnumAttributeValidator.new('String', ["DETECTED", "COMPLETE", "UNKNOWN"])
      return false unless status_validator.valid?(@status)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      validator = EnumAttributeValidator.new('String', ["DETECTED", "COMPLETE", "UNKNOWN"])
      unless validator.valid?(status)
        fail ArgumentError, "invalid value for \"status\", must be one of #{validator.allowable_values}."
      end
      @status = status
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          channel_id == o.channel_id &&
          merchant_id == o.merchant_id &&
          merchant_display_name == o.merchant_display_name &&
          reference == o.reference &&
          date_created == o.date_created &&
          last_updated == o.last_updated &&
          status == o.status &&
          uuid == o.uuid &&
          hash == o.hash &&
          address == o.address &&
          tag == o.tag &&
          paid_currency == o.paid_currency &&
          display_currency == o.display_currency &&
          wallet_currency == o.wallet_currency &&
          fee_currency == o.fee_currency &&
          paid_amount == o.paid_amount &&
          display_amount == o.display_amount &&
          wallet_amount == o.wallet_amount &&
          fee_amount == o.fee_amount &&
          exchange_rate == o.exchange_rate &&
          display_rate == o.display_rate &&
          risk == o.risk &&
          sources == o.sources &&
          network_fee == o.network_fee
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [channel_id, merchant_id, merchant_display_name, reference, date_created, last_updated, status, uuid, hash, address, tag, paid_currency, display_currency, wallet_currency, fee_currency, paid_amount, display_amount, wallet_amount, fee_amount, exchange_rate, display_rate, risk, sources, network_fee].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
