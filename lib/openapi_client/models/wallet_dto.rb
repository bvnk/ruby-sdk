=begin
#BVNK API Endpoints

#The BVNK API is designed to facilitate seamless and secure transactions including payments, channels, and digital wallet transactions.

The version of the OpenAPI document: 1.0.1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.6.0

=end

require 'date'
require 'time'

module OpenapiClient
  class WalletDto
    # The crypto wallet address
    attr_accessor :address

    # The array of alternative protocol addresses.
    attr_accessor :alternatives

    # The approximate amount availible in the wallet.
    attr_accessor :approx_available

    # The balance amount availible of the wallet.
    attr_accessor :approx_balance

    attr_accessor :available

    # The balance of the wallet.
    attr_accessor :balance

    # The availible converted amount
    attr_accessor :converted_available

    attr_accessor :currency

    # Is a custodian wallet.
    attr_accessor :custodian_wallet

    # The fee to deposit funds in wallet.
    attr_accessor :deposit_fee

    # The description of the wallet.
    attr_accessor :description

    # The wallet ID.
    attr_accessor :id

    # Is E Money Wallet
    attr_accessor :is_emoney

    # Is a lookup.
    attr_accessor :lookup

    # The protocol of the wallet.
    attr_accessor :protocol

    # Is able to support deposits.
    attr_accessor :supports_deposits

    # Is a third party wallet.
    attr_accessor :supports_third_party

    # Is able to support withdrawals.
    attr_accessor :supports_withdrawals

    # The fee to withdraw funds from wallet.
    attr_accessor :withdrawal_fee

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'address' => :'address',
        :'alternatives' => :'alternatives',
        :'approx_available' => :'approxAvailable',
        :'approx_balance' => :'approxBalance',
        :'available' => :'available',
        :'balance' => :'balance',
        :'converted_available' => :'convertedAvailable',
        :'currency' => :'currency',
        :'custodian_wallet' => :'custodianWallet',
        :'deposit_fee' => :'depositFee',
        :'description' => :'description',
        :'id' => :'id',
        :'is_emoney' => :'isEmoney',
        :'lookup' => :'lookup',
        :'protocol' => :'protocol',
        :'supports_deposits' => :'supportsDeposits',
        :'supports_third_party' => :'supportsThirdParty',
        :'supports_withdrawals' => :'supportsWithdrawals',
        :'withdrawal_fee' => :'withdrawalFee'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'address' => :'String',
        :'alternatives' => :'Array<Object>',
        :'approx_available' => :'String',
        :'approx_balance' => :'String',
        :'available' => :'Float',
        :'balance' => :'Float',
        :'converted_available' => :'Float',
        :'currency' => :'CurrencyDto',
        :'custodian_wallet' => :'Boolean',
        :'deposit_fee' => :'Float',
        :'description' => :'String',
        :'id' => :'Integer',
        :'is_emoney' => :'Boolean',
        :'lookup' => :'String',
        :'protocol' => :'String',
        :'supports_deposits' => :'Boolean',
        :'supports_third_party' => :'Boolean',
        :'supports_withdrawals' => :'Boolean',
        :'withdrawal_fee' => :'Float'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::WalletDto` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::WalletDto`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'address')
        self.address = attributes[:'address']
      end

      if attributes.key?(:'alternatives')
        if (value = attributes[:'alternatives']).is_a?(Array)
          self.alternatives = value
        end
      end

      if attributes.key?(:'approx_available')
        self.approx_available = attributes[:'approx_available']
      end

      if attributes.key?(:'approx_balance')
        self.approx_balance = attributes[:'approx_balance']
      end

      if attributes.key?(:'available')
        self.available = attributes[:'available']
      end

      if attributes.key?(:'balance')
        self.balance = attributes[:'balance']
      end

      if attributes.key?(:'converted_available')
        self.converted_available = attributes[:'converted_available']
      end

      if attributes.key?(:'currency')
        self.currency = attributes[:'currency']
      end

      if attributes.key?(:'custodian_wallet')
        self.custodian_wallet = attributes[:'custodian_wallet']
      end

      if attributes.key?(:'deposit_fee')
        self.deposit_fee = attributes[:'deposit_fee']
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'is_emoney')
        self.is_emoney = attributes[:'is_emoney']
      else
        self.is_emoney = false
      end

      if attributes.key?(:'lookup')
        self.lookup = attributes[:'lookup']
      end

      if attributes.key?(:'protocol')
        self.protocol = attributes[:'protocol']
      end

      if attributes.key?(:'supports_deposits')
        self.supports_deposits = attributes[:'supports_deposits']
      else
        self.supports_deposits = true
      end

      if attributes.key?(:'supports_third_party')
        self.supports_third_party = attributes[:'supports_third_party']
      else
        self.supports_third_party = false
      end

      if attributes.key?(:'supports_withdrawals')
        self.supports_withdrawals = attributes[:'supports_withdrawals']
      else
        self.supports_withdrawals = true
      end

      if attributes.key?(:'withdrawal_fee')
        self.withdrawal_fee = attributes[:'withdrawal_fee']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          address == o.address &&
          alternatives == o.alternatives &&
          approx_available == o.approx_available &&
          approx_balance == o.approx_balance &&
          available == o.available &&
          balance == o.balance &&
          converted_available == o.converted_available &&
          currency == o.currency &&
          custodian_wallet == o.custodian_wallet &&
          deposit_fee == o.deposit_fee &&
          description == o.description &&
          id == o.id &&
          is_emoney == o.is_emoney &&
          lookup == o.lookup &&
          protocol == o.protocol &&
          supports_deposits == o.supports_deposits &&
          supports_third_party == o.supports_third_party &&
          supports_withdrawals == o.supports_withdrawals &&
          withdrawal_fee == o.withdrawal_fee
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [address, alternatives, approx_available, approx_balance, available, balance, converted_available, currency, custodian_wallet, deposit_fee, description, id, is_emoney, lookup, protocol, supports_deposits, supports_third_party, supports_withdrawals, withdrawal_fee].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
