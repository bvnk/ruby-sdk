=begin
#BVNK API Endpoints

#The BVNK API is designed to facilitate seamless and secure transactions including payments, channels, and digital wallet transactions.

The version of the OpenAPI document: 1.0.1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.6.0

=end

require 'date'
require 'time'

module OpenapiClient
  # The request data required to create a payment in or a payment out
  class PayRequestDto
    # Your Merchant ID. You can find it on the Merchant Details page in your account.
    attr_accessor :merchant_id

    # The payment amount.
    attr_accessor :amount

    # The time period after which payment expires.
    attr_accessor :expiry_minutes

    # The currency acronym.
    attr_accessor :currency

    # The URL that the customer will be redirected to if they click 'Back to Merchant' button on the payment web page.
    attr_accessor :return_url

    # The custom payment reference ID to tie the payment to your customer.
    attr_accessor :reference

    attr_accessor :type

    attr_accessor :pay_in_details

    attr_accessor :pay_out_details

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'merchant_id' => :'merchantId',
        :'amount' => :'amount',
        :'expiry_minutes' => :'expiryMinutes',
        :'currency' => :'currency',
        :'return_url' => :'returnUrl',
        :'reference' => :'reference',
        :'type' => :'type',
        :'pay_in_details' => :'payInDetails',
        :'pay_out_details' => :'payOutDetails'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'merchant_id' => :'String',
        :'amount' => :'Float',
        :'expiry_minutes' => :'Integer',
        :'currency' => :'String',
        :'return_url' => :'String',
        :'reference' => :'String',
        :'type' => :'DirectionDto',
        :'pay_in_details' => :'PayInDetailDto',
        :'pay_out_details' => :'PayOutDetailDto'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::PayRequestDto` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::PayRequestDto`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'merchant_id')
        self.merchant_id = attributes[:'merchant_id']
      else
        self.merchant_id = '5C8D8D78-366A-4AFB-B658-A64CE543C5DB'
      end

      if attributes.key?(:'amount')
        self.amount = attributes[:'amount']
      else
        self.amount = 223.05
      end

      if attributes.key?(:'expiry_minutes')
        self.expiry_minutes = attributes[:'expiry_minutes']
      else
        self.expiry_minutes = 20
      end

      if attributes.key?(:'currency')
        self.currency = attributes[:'currency']
      else
        self.currency = 'EUR'
      end

      if attributes.key?(:'return_url')
        self.return_url = attributes[:'return_url']
      else
        self.return_url = 'https://my-shop.com/payment-complete?ref=xyz'
      end

      if attributes.key?(:'reference')
        self.reference = attributes[:'reference']
      else
        self.reference = 'myUniqueRef333'
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      else
        self.type = 'IN'
      end

      if attributes.key?(:'pay_in_details')
        self.pay_in_details = attributes[:'pay_in_details']
      end

      if attributes.key?(:'pay_out_details')
        self.pay_out_details = attributes[:'pay_out_details']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @merchant_id.nil?
        invalid_properties.push('invalid value for "merchant_id", merchant_id cannot be nil.')
      end

      if @merchant_id.to_s.length > 50
        invalid_properties.push('invalid value for "merchant_id", the character length must be smaller than or equal to 50.')
      end

      if @merchant_id.to_s.length < 6
        invalid_properties.push('invalid value for "merchant_id", the character length must be great than or equal to 6.')
      end

      if @amount.nil?
        invalid_properties.push('invalid value for "amount", amount cannot be nil.')
      end

      if @amount < 0
        invalid_properties.push('invalid value for "amount", must be greater than or equal to 0.')
      end

      if @currency.nil?
        invalid_properties.push('invalid value for "currency", currency cannot be nil.')
      end

      if @currency.to_s.length > 20
        invalid_properties.push('invalid value for "currency", the character length must be smaller than or equal to 20.')
      end

      if @currency.to_s.length < 2
        invalid_properties.push('invalid value for "currency", the character length must be great than or equal to 2.')
      end

      if @reference.nil?
        invalid_properties.push('invalid value for "reference", reference cannot be nil.')
      end

      if @reference.to_s.length > 255
        invalid_properties.push('invalid value for "reference", the character length must be smaller than or equal to 255.')
      end

      if @reference.to_s.length < 6
        invalid_properties.push('invalid value for "reference", the character length must be great than or equal to 6.')
      end

      if @type.nil?
        invalid_properties.push('invalid value for "type", type cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @merchant_id.nil?
      return false if @merchant_id.to_s.length > 50
      return false if @merchant_id.to_s.length < 6
      return false if @amount.nil?
      return false if @amount < 0
      return false if @currency.nil?
      return false if @currency.to_s.length > 20
      return false if @currency.to_s.length < 2
      return false if @reference.nil?
      return false if @reference.to_s.length > 255
      return false if @reference.to_s.length < 6
      return false if @type.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] merchant_id Value to be assigned
    def merchant_id=(merchant_id)
      if merchant_id.nil?
        fail ArgumentError, 'merchant_id cannot be nil'
      end

      if merchant_id.to_s.length > 50
        fail ArgumentError, 'invalid value for "merchant_id", the character length must be smaller than or equal to 50.'
      end

      if merchant_id.to_s.length < 6
        fail ArgumentError, 'invalid value for "merchant_id", the character length must be great than or equal to 6.'
      end

      @merchant_id = merchant_id
    end

    # Custom attribute writer method with validation
    # @param [Object] amount Value to be assigned
    def amount=(amount)
      if amount.nil?
        fail ArgumentError, 'amount cannot be nil'
      end

      if amount < 0
        fail ArgumentError, 'invalid value for "amount", must be greater than or equal to 0.'
      end

      @amount = amount
    end

    # Custom attribute writer method with validation
    # @param [Object] currency Value to be assigned
    def currency=(currency)
      if currency.nil?
        fail ArgumentError, 'currency cannot be nil'
      end

      if currency.to_s.length > 20
        fail ArgumentError, 'invalid value for "currency", the character length must be smaller than or equal to 20.'
      end

      if currency.to_s.length < 2
        fail ArgumentError, 'invalid value for "currency", the character length must be great than or equal to 2.'
      end

      @currency = currency
    end

    # Custom attribute writer method with validation
    # @param [Object] reference Value to be assigned
    def reference=(reference)
      if reference.nil?
        fail ArgumentError, 'reference cannot be nil'
      end

      if reference.to_s.length > 255
        fail ArgumentError, 'invalid value for "reference", the character length must be smaller than or equal to 255.'
      end

      if reference.to_s.length < 6
        fail ArgumentError, 'invalid value for "reference", the character length must be great than or equal to 6.'
      end

      @reference = reference
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          merchant_id == o.merchant_id &&
          amount == o.amount &&
          expiry_minutes == o.expiry_minutes &&
          currency == o.currency &&
          return_url == o.return_url &&
          reference == o.reference &&
          type == o.type &&
          pay_in_details == o.pay_in_details &&
          pay_out_details == o.pay_out_details
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [merchant_id, amount, expiry_minutes, currency, return_url, reference, type, pay_in_details, pay_out_details].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
