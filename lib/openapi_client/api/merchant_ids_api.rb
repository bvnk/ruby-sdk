=begin
#BVNK API Endpoints

#The BVNK API is designed to facilitate seamless and secure transactions including payments, channels, and digital wallet transactions.

The version of the OpenAPI document: 1.0.1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.6.0

=end

require 'cgi'

module OpenapiClient
  class MerchantIDsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create Merchant ID
    # Generate a Merchant ID for your account to process pay-ins and pay-outs through our API.  A Merchant ID is essential as it designates the account wallet where incoming pay-ins will be settled. For instance, if a Merchant ID is associated with a EUR wallet ID, any incoming USDT payment will be automatically converted to EUR and deposited in the designated EUR wallet.  Vice versa, any outgoing USDT payment will be automatically converted and withdrawn from the designated EUR wallet.  For further information, please visit https://docs.bvnk.com/docs/creating-your-first-merchant to learn more about creating your first Merchant ID.
    # @param [Hash] opts the optional parameters
    # @option opts [MerchantIdCreateRequest] :merchant_id_create_request 
    # @return [MerchantDto]
    def merchant_id_create(opts = {})
      data, _status_code, _headers = merchant_id_create_with_http_info(opts)
      data
    end

    # Create Merchant ID
    # Generate a Merchant ID for your account to process pay-ins and pay-outs through our API.  A Merchant ID is essential as it designates the account wallet where incoming pay-ins will be settled. For instance, if a Merchant ID is associated with a EUR wallet ID, any incoming USDT payment will be automatically converted to EUR and deposited in the designated EUR wallet.  Vice versa, any outgoing USDT payment will be automatically converted and withdrawn from the designated EUR wallet.  For further information, please visit https://docs.bvnk.com/docs/creating-your-first-merchant to learn more about creating your first Merchant ID.
    # @param [Hash] opts the optional parameters
    # @option opts [MerchantIdCreateRequest] :merchant_id_create_request 
    # @return [Array<(MerchantDto, Integer, Hash)>] MerchantDto data, response status code and response headers
    def merchant_id_create_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MerchantIDsApi.merchant_id_create ...'
      end
      # resource path
      local_var_path = '/api/v1/merchant'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'merchant_id_create_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'MerchantDto'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Hawk']

      new_options = opts.merge(
        :operation => :"MerchantIDsApi.merchant_id_create",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MerchantIDsApi#merchant_id_create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Merchant IDs
    # Retrieves merchant IDs setup on your account.
    # @param [Hash] opts the optional parameters
    # @return [Array<MerchantDto>]
    def merchant_id_list(opts = {})
      data, _status_code, _headers = merchant_id_list_with_http_info(opts)
      data
    end

    # List Merchant IDs
    # Retrieves merchant IDs setup on your account.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<MerchantDto>, Integer, Hash)>] Array<MerchantDto> data, response status code and response headers
    def merchant_id_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MerchantIDsApi.merchant_id_list ...'
      end
      # resource path
      local_var_path = '/api/v1/merchant'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<MerchantDto>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Hawk']

      new_options = opts.merge(
        :operation => :"MerchantIDsApi.merchant_id_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MerchantIDsApi#merchant_id_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
