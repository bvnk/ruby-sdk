=begin
#BVNK API Endpoints

#The BVNK API is designed to facilitate seamless and secure transactions including payments, channels, and digital wallet transactions.

The version of the OpenAPI document: 1.0.1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.6.0

=end

require 'cgi'

module OpenapiClient
  class PaymentsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create payment
    # Creates a payment, either type IN or type OUT.
    # @param pay_request_dto [PayRequestDto] 
    # @param [Hash] opts the optional parameters
    # @return [SummaryPaymentDto]
    def payment_create(pay_request_dto, opts = {})
      data, _status_code, _headers = payment_create_with_http_info(pay_request_dto, opts)
      data
    end

    # Create payment
    # Creates a payment, either type IN or type OUT.
    # @param pay_request_dto [PayRequestDto] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SummaryPaymentDto, Integer, Hash)>] SummaryPaymentDto data, response status code and response headers
    def payment_create_with_http_info(pay_request_dto, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PaymentsApi.payment_create ...'
      end
      # verify the required parameter 'pay_request_dto' is set
      if @api_client.config.client_side_validation && pay_request_dto.nil?
        fail ArgumentError, "Missing the required parameter 'pay_request_dto' when calling PaymentsApi.payment_create"
      end
      # resource path
      local_var_path = '/api/v1/pay/summary'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(pay_request_dto)

      # return_type
      return_type = opts[:debug_return_type] || 'SummaryPaymentDto'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Hawk']

      new_options = opts.merge(
        :operation => :"PaymentsApi.payment_create",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PaymentsApi#payment_create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Payments
    # Retrieves a list of payments on a specific Merchant ID.
    # @param merchant_id [String] The merchant ID as a UUID.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :customer_reference The customer reference.
    # @option opts [String] :payment_external_id The merchant payment uuid.
    # @option opts [String] :from_date The start date.
    # @option opts [String] :to_date The end date.
    # @option opts [Float] :offset Where to start fetching records.
    # @option opts [Float] :max Maximum number of items in response.
    # @option opts [PaymentStatusDto] :status 
    # @option opts [String] :order Ordering direction.
    # @return [Array<SummaryPaymentDto>]
    def payment_list(merchant_id, opts = {})
      data, _status_code, _headers = payment_list_with_http_info(merchant_id, opts)
      data
    end

    # List Payments
    # Retrieves a list of payments on a specific Merchant ID.
    # @param merchant_id [String] The merchant ID as a UUID.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :customer_reference The customer reference.
    # @option opts [String] :payment_external_id The merchant payment uuid.
    # @option opts [String] :from_date The start date.
    # @option opts [String] :to_date The end date.
    # @option opts [Float] :offset Where to start fetching records.
    # @option opts [Float] :max Maximum number of items in response.
    # @option opts [PaymentStatusDto] :status 
    # @option opts [String] :order Ordering direction.
    # @return [Array<(Array<SummaryPaymentDto>, Integer, Hash)>] Array<SummaryPaymentDto> data, response status code and response headers
    def payment_list_with_http_info(merchant_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PaymentsApi.payment_list ...'
      end
      # verify the required parameter 'merchant_id' is set
      if @api_client.config.client_side_validation && merchant_id.nil?
        fail ArgumentError, "Missing the required parameter 'merchant_id' when calling PaymentsApi.payment_list"
      end
      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] < 0
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling PaymentsApi.payment_list, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'max'].nil? && opts[:'max'] < 1
        fail ArgumentError, 'invalid value for "opts[:"max"]" when calling PaymentsApi.payment_list, must be greater than or equal to 1.'
      end

      allowable_values = ["asc", "desc"]
      if @api_client.config.client_side_validation && opts[:'order'] && !allowable_values.include?(opts[:'order'])
        fail ArgumentError, "invalid value for \"order\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/api/v1/pay/summary'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'merchantId'] = merchant_id
      query_params[:'customerReference'] = opts[:'customer_reference'] if !opts[:'customer_reference'].nil?
      query_params[:'paymentExternalId'] = opts[:'payment_external_id'] if !opts[:'payment_external_id'].nil?
      query_params[:'fromDate'] = opts[:'from_date'] if !opts[:'from_date'].nil?
      query_params[:'toDate'] = opts[:'to_date'] if !opts[:'to_date'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'max'] = opts[:'max'] if !opts[:'max'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?
      query_params[:'order'] = opts[:'order'] if !opts[:'order'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<SummaryPaymentDto>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Hawk']

      new_options = opts.merge(
        :operation => :"PaymentsApi.payment_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PaymentsApi#payment_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Validate Address
    # Validates that a crypto address is correct.  Use this endpoint to validate that an address exists, is correctly formatted, and includes all the required data. This endpoint can help prevent your end users losing funds when submitting a payout.
    # @param pay_out_detail_dto [PayOutDetailDto] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def payment_out_validate(pay_out_detail_dto, opts = {})
      payment_out_validate_with_http_info(pay_out_detail_dto, opts)
      nil
    end

    # Validate Address
    # Validates that a crypto address is correct.  Use this endpoint to validate that an address exists, is correctly formatted, and includes all the required data. This endpoint can help prevent your end users losing funds when submitting a payout.
    # @param pay_out_detail_dto [PayOutDetailDto] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def payment_out_validate_with_http_info(pay_out_detail_dto, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PaymentsApi.payment_out_validate ...'
      end
      # verify the required parameter 'pay_out_detail_dto' is set
      if @api_client.config.client_side_validation && pay_out_detail_dto.nil?
        fail ArgumentError, "Missing the required parameter 'pay_out_detail_dto' when calling PaymentsApi.payment_out_validate"
      end
      # resource path
      local_var_path = '/api/v1/pay/validate'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(pay_out_detail_dto)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PaymentsApi.payment_out_validate",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PaymentsApi#payment_out_validate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Payment
    # Retrieves details of a specific payment using the UUID of the payment.
    # @param uuid [String] The payment UUID.
    # @param [Hash] opts the optional parameters
    # @return [SummaryPaymentDto]
    def payment_read(uuid, opts = {})
      data, _status_code, _headers = payment_read_with_http_info(uuid, opts)
      data
    end

    # Get Payment
    # Retrieves details of a specific payment using the UUID of the payment.
    # @param uuid [String] The payment UUID.
    # @param [Hash] opts the optional parameters
    # @return [Array<(SummaryPaymentDto, Integer, Hash)>] SummaryPaymentDto data, response status code and response headers
    def payment_read_with_http_info(uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PaymentsApi.payment_read ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling PaymentsApi.payment_read"
      end
      # resource path
      local_var_path = '/api/v1/pay/{uuid}/summary'.sub('{' + 'uuid' + '}', CGI.escape(uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SummaryPaymentDto'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Hawk']

      new_options = opts.merge(
        :operation => :"PaymentsApi.payment_read",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PaymentsApi#payment_read\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
