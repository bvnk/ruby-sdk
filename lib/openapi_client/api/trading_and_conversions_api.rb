=begin
#BVNK API Endpoints

#The BVNK API is designed to facilitate seamless and secure transactions including payments, channels, and digital wallet transactions.

The version of the OpenAPI document: 1.0.1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.6.0

=end

require 'cgi'

module OpenapiClient
  class TradingAndConversionsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Accept Quote
    # Executes a quote.
    # @param uuid [String] The quote UUID you are accepting.
    # @param [Hash] opts the optional parameters
    # @return [AcceptedQuoteDto]
    def quote_accept(uuid, opts = {})
      data, _status_code, _headers = quote_accept_with_http_info(uuid, opts)
      data
    end

    # Accept Quote
    # Executes a quote.
    # @param uuid [String] The quote UUID you are accepting.
    # @param [Hash] opts the optional parameters
    # @return [Array<(AcceptedQuoteDto, Integer, Hash)>] AcceptedQuoteDto data, response status code and response headers
    def quote_accept_with_http_info(uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TradingAndConversionsApi.quote_accept ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling TradingAndConversionsApi.quote_accept"
      end
      # resource path
      local_var_path = '/api/v1/quote/accept/{uuid}'.sub('{' + 'uuid' + '}', CGI.escape(uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AcceptedQuoteDto'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Hawk']

      new_options = opts.merge(
        :operation => :"TradingAndConversionsApi.quote_accept",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TradingAndConversionsApi#quote_accept\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Quote
    # Creates a quote to convert between wallets.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :estimate Create estimate quote (default to false)
    # @option opts [QuoteRequestDto] :quote_request_dto 
    # @return [QuoteDto]
    def quote_create(opts = {})
      data, _status_code, _headers = quote_create_with_http_info(opts)
      data
    end

    # Create Quote
    # Creates a quote to convert between wallets.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :estimate Create estimate quote (default to false)
    # @option opts [QuoteRequestDto] :quote_request_dto 
    # @return [Array<(QuoteDto, Integer, Hash)>] QuoteDto data, response status code and response headers
    def quote_create_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TradingAndConversionsApi.quote_create ...'
      end
      # resource path
      local_var_path = '/api/v1/quote'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'estimate'] = opts[:'estimate'] if !opts[:'estimate'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'quote_request_dto'])

      # return_type
      return_type = opts[:debug_return_type] || 'QuoteDto'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Hawk']

      new_options = opts.merge(
        :operation => :"TradingAndConversionsApi.quote_create",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TradingAndConversionsApi#quote_create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Quotes
    # Retrieves all quotes on a specific Merchant ID.
    # @param merchant_id [String] Merchant ID you are retrieving quotes from.
    # @param [Hash] opts the optional parameters
    # @return [Array<QuoteDto>]
    def quote_list(merchant_id, opts = {})
      data, _status_code, _headers = quote_list_with_http_info(merchant_id, opts)
      data
    end

    # List Quotes
    # Retrieves all quotes on a specific Merchant ID.
    # @param merchant_id [String] Merchant ID you are retrieving quotes from.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<QuoteDto>, Integer, Hash)>] Array<QuoteDto> data, response status code and response headers
    def quote_list_with_http_info(merchant_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TradingAndConversionsApi.quote_list ...'
      end
      # verify the required parameter 'merchant_id' is set
      if @api_client.config.client_side_validation && merchant_id.nil?
        fail ArgumentError, "Missing the required parameter 'merchant_id' when calling TradingAndConversionsApi.quote_list"
      end
      # resource path
      local_var_path = '/api/v1/quote/{merchantId}'.sub('{' + 'merchantId' + '}', CGI.escape(merchant_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<QuoteDto>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Hawk']

      new_options = opts.merge(
        :operation => :"TradingAndConversionsApi.quote_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TradingAndConversionsApi#quote_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Quote
    # Retrieves a specific quote.
    # @param uuid [String] UUID of the quote you are retrieving.
    # @param [Hash] opts the optional parameters
    # @return [QuoteDto]
    def quote_read(uuid, opts = {})
      data, _status_code, _headers = quote_read_with_http_info(uuid, opts)
      data
    end

    # Get Quote
    # Retrieves a specific quote.
    # @param uuid [String] UUID of the quote you are retrieving.
    # @param [Hash] opts the optional parameters
    # @return [Array<(QuoteDto, Integer, Hash)>] QuoteDto data, response status code and response headers
    def quote_read_with_http_info(uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TradingAndConversionsApi.quote_read ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling TradingAndConversionsApi.quote_read"
      end
      # resource path
      local_var_path = '/api/v1/quote/{uuid}'.sub('{' + 'uuid' + '}', CGI.escape(uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'QuoteDto'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Hawk']

      new_options = opts.merge(
        :operation => :"TradingAndConversionsApi.quote_read",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TradingAndConversionsApi#quote_read\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
