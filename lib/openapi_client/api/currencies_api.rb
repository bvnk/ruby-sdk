=begin
#BVNK API Endpoints

#The BVNK API is designed to facilitate seamless and secure transactions including payments, channels, and digital wallet transactions.

The version of the OpenAPI document: 1.0.1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.6.0

=end

require 'cgi'

module OpenapiClient
  class CurrenciesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # List Crypto Currencies
    # Retrieves a list of all cryptocurrencies available on the BVNK platform. This list represents cryptocurrencies that end users can select whilst making a payment.  For sandbox, only Ethereum (ETH) is fully functional.
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :offset Where to start fetching records. (default to 0)
    # @option opts [Float] :max Maximum number of items in response. (default to 200)
    # @option opts [Boolean] :allow_deposits Only list currencies that allow deposits. (default to false)
    # @return [Array<CurrencyDto>]
    def list_currencies_crypto(opts = {})
      data, _status_code, _headers = list_currencies_crypto_with_http_info(opts)
      data
    end

    # List Crypto Currencies
    # Retrieves a list of all cryptocurrencies available on the BVNK platform. This list represents cryptocurrencies that end users can select whilst making a payment.  For sandbox, only Ethereum (ETH) is fully functional.
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :offset Where to start fetching records. (default to 0)
    # @option opts [Float] :max Maximum number of items in response. (default to 200)
    # @option opts [Boolean] :allow_deposits Only list currencies that allow deposits. (default to false)
    # @return [Array<(Array<CurrencyDto>, Integer, Hash)>] Array<CurrencyDto> data, response status code and response headers
    def list_currencies_crypto_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CurrenciesApi.list_currencies_crypto ...'
      end
      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] < 0
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling CurrenciesApi.list_currencies_crypto, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'max'].nil? && opts[:'max'] < 1
        fail ArgumentError, 'invalid value for "opts[:"max"]" when calling CurrenciesApi.list_currencies_crypto, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/api/currency/crypto'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'max'] = opts[:'max'] if !opts[:'max'].nil?
      query_params[:'allowDeposits'] = opts[:'allow_deposits'] if !opts[:'allow_deposits'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<CurrencyDto>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CurrenciesApi.list_currencies_crypto",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CurrenciesApi#list_currencies_crypto\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Wallet Currencies
    # These are the currencies that can be used to create a new wallet.
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :offset Where to start fetching records. (default to 0)
    # @option opts [Float] :max Maximum number of items in response. (default to 200)
    # @return [Array<CurrencyDto>]
    def list_currencies_deposit(opts = {})
      data, _status_code, _headers = list_currencies_deposit_with_http_info(opts)
      data
    end

    # List Wallet Currencies
    # These are the currencies that can be used to create a new wallet.
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :offset Where to start fetching records. (default to 0)
    # @option opts [Float] :max Maximum number of items in response. (default to 200)
    # @return [Array<(Array<CurrencyDto>, Integer, Hash)>] Array<CurrencyDto> data, response status code and response headers
    def list_currencies_deposit_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CurrenciesApi.list_currencies_deposit ...'
      end
      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] < 0
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling CurrenciesApi.list_currencies_deposit, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'max'].nil? && opts[:'max'] < 1
        fail ArgumentError, 'invalid value for "opts[:"max"]" when calling CurrenciesApi.list_currencies_deposit, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/api/currency/deposit'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'max'] = opts[:'max'] if !opts[:'max'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<CurrencyDto>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CurrenciesApi.list_currencies_deposit",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CurrenciesApi#list_currencies_deposit\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Fiat Currencies
    # Retrieves a list of all display fiat currencies available on BVNK's Crypto Payments API. This list refers to currencies merchants can display on a payment page to an end user. It does not represent the list of currencies that can be held on the platform in wallets.
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :offset Where to start fetching records. (default to 0)
    # @option opts [Float] :max Maximum number of items in response. (default to 200)
    # @return [Array<CurrencyFiatDto>]
    def list_currencies_fiat(opts = {})
      data, _status_code, _headers = list_currencies_fiat_with_http_info(opts)
      data
    end

    # List Fiat Currencies
    # Retrieves a list of all display fiat currencies available on BVNK&#39;s Crypto Payments API. This list refers to currencies merchants can display on a payment page to an end user. It does not represent the list of currencies that can be held on the platform in wallets.
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :offset Where to start fetching records. (default to 0)
    # @option opts [Float] :max Maximum number of items in response. (default to 200)
    # @return [Array<(Array<CurrencyFiatDto>, Integer, Hash)>] Array<CurrencyFiatDto> data, response status code and response headers
    def list_currencies_fiat_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CurrenciesApi.list_currencies_fiat ...'
      end
      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] < 0
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling CurrenciesApi.list_currencies_fiat, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'max'].nil? && opts[:'max'] < 1
        fail ArgumentError, 'invalid value for "opts[:"max"]" when calling CurrenciesApi.list_currencies_fiat, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/api/currency/fiat'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'max'] = opts[:'max'] if !opts[:'max'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<CurrencyFiatDto>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CurrenciesApi.list_currencies_fiat",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CurrenciesApi#list_currencies_fiat\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
