=begin
#BVNK API Endpoints

#The BVNK API is designed to facilitate seamless and secure transactions including payments, channels, and digital wallet transactions.

The version of the OpenAPI document: 1.0.1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.6.0

=end

require 'cgi'

module OpenapiClient
  class WalletsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # List Wallet Balances
    # Retrieves the balances of your wallets on platform.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :date Date at to retrieve balances.
    # @return [Array<BalanceDto>]
    def wallet_balance_list(opts = {})
      data, _status_code, _headers = wallet_balance_list_with_http_info(opts)
      data
    end

    # List Wallet Balances
    # Retrieves the balances of your wallets on platform.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :date Date at to retrieve balances.
    # @return [Array<(Array<BalanceDto>, Integer, Hash)>] Array<BalanceDto> data, response status code and response headers
    def wallet_balance_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WalletsApi.wallet_balance_list ...'
      end
      # resource path
      local_var_path = '/api/wallet/balances'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'date'] = opts[:'date'] if !opts[:'date'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<BalanceDto>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Hawk']

      new_options = opts.merge(
        :operation => :"WalletsApi.wallet_balance_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WalletsApi#wallet_balance_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Wallet
    # Creates a wallet on the BVNK platform.
    # @param [Hash] opts the optional parameters
    # @option opts [WalletRequestDto] :wallet_request_dto 
    # @return [WalletDto]
    def wallet_create(opts = {})
      data, _status_code, _headers = wallet_create_with_http_info(opts)
      data
    end

    # Create Wallet
    # Creates a wallet on the BVNK platform.
    # @param [Hash] opts the optional parameters
    # @option opts [WalletRequestDto] :wallet_request_dto 
    # @return [Array<(WalletDto, Integer, Hash)>] WalletDto data, response status code and response headers
    def wallet_create_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WalletsApi.wallet_create ...'
      end
      # resource path
      local_var_path = '/api/wallet'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'wallet_request_dto'])

      # return_type
      return_type = opts[:debug_return_type] || 'WalletDto'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Hawk']

      new_options = opts.merge(
        :operation => :"WalletsApi.wallet_create",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WalletsApi#wallet_create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Wallets
    # Retrieves a list of wallets on your account.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset Where to start fetching records.
    # @option opts [Integer] :max Maximum number of items in response. (default to 10)
    # @return [Array<WalletDto>]
    def wallet_list(opts = {})
      data, _status_code, _headers = wallet_list_with_http_info(opts)
      data
    end

    # List Wallets
    # Retrieves a list of wallets on your account.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset Where to start fetching records.
    # @option opts [Integer] :max Maximum number of items in response. (default to 10)
    # @return [Array<(Array<WalletDto>, Integer, Hash)>] Array<WalletDto> data, response status code and response headers
    def wallet_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WalletsApi.wallet_list ...'
      end
      # resource path
      local_var_path = '/api/wallet'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'max'] = opts[:'max'] if !opts[:'max'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<WalletDto>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Hawk']

      new_options = opts.merge(
        :operation => :"WalletsApi.wallet_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WalletsApi#wallet_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Wallet
    # Retrieves a specific wallet.
    # @param id [Integer] The ID of the wallet that you want to retrieve.
    # @param [Hash] opts the optional parameters
    # @return [WalletDto]
    def wallet_read(id, opts = {})
      data, _status_code, _headers = wallet_read_with_http_info(id, opts)
      data
    end

    # Get Wallet
    # Retrieves a specific wallet.
    # @param id [Integer] The ID of the wallet that you want to retrieve.
    # @param [Hash] opts the optional parameters
    # @return [Array<(WalletDto, Integer, Hash)>] WalletDto data, response status code and response headers
    def wallet_read_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WalletsApi.wallet_read ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling WalletsApi.wallet_read"
      end
      # resource path
      local_var_path = '/api/wallet/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'WalletDto'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Hawk']

      new_options = opts.merge(
        :operation => :"WalletsApi.wallet_read",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WalletsApi#wallet_read\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Transactions Report
    # Report all transactions from wallet in specified format. Report will be generated and sent to main account email in the specified format.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :wallet_id Date at to retrieve balances. (default to 255861)
    # @option opts [String] :from_date Export range from date in format &#39;YYYY-MM-dd&#39;. (default to '2022-09-17')
    # @option opts [String] :to_date Export range to date in format &#39;YYYY-MM-dd&#39;. (default to '2023-03-17')
    # @option opts [String] :format &#39;json&#39; - json format, &#39;csv&#39; - csv format (default to 'csv')
    # @option opts [String] :transaction_type Transaction type code
    # @return [Array<TransactionReportDto>]
    def wallet_transaction_report(opts = {})
      data, _status_code, _headers = wallet_transaction_report_with_http_info(opts)
      data
    end

    # Transactions Report
    # Report all transactions from wallet in specified format. Report will be generated and sent to main account email in the specified format.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :wallet_id Date at to retrieve balances. (default to 255861)
    # @option opts [String] :from_date Export range from date in format &#39;YYYY-MM-dd&#39;. (default to '2022-09-17')
    # @option opts [String] :to_date Export range to date in format &#39;YYYY-MM-dd&#39;. (default to '2023-03-17')
    # @option opts [String] :format &#39;json&#39; - json format, &#39;csv&#39; - csv format (default to 'csv')
    # @option opts [String] :transaction_type Transaction type code
    # @return [Array<(Array<TransactionReportDto>, Integer, Hash)>] Array<TransactionReportDto> data, response status code and response headers
    def wallet_transaction_report_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WalletsApi.wallet_transaction_report ...'
      end
      # resource path
      local_var_path = '/api/transaction/report'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'walletId'] = opts[:'wallet_id'] if !opts[:'wallet_id'].nil?
      query_params[:'fromDate'] = opts[:'from_date'] if !opts[:'from_date'].nil?
      query_params[:'toDate'] = opts[:'to_date'] if !opts[:'to_date'].nil?
      query_params[:'format'] = opts[:'format'] if !opts[:'format'].nil?
      query_params[:'transactionType'] = opts[:'transaction_type'] if !opts[:'transaction_type'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<TransactionReportDto>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Hawk']

      new_options = opts.merge(
        :operation => :"WalletsApi.wallet_transaction_report",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WalletsApi#wallet_transaction_report\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
